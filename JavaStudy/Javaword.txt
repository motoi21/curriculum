■ 開発
⚪︎ウォーターフォール開発
　　上から順に工程を一つずつ終わらせていく開発手法。基本的に工程を後戻りしないやり方、進捗管理がしやすい
⚪︎アジャイル開発
　　計画→設計→実装→テストといった開発工程を、機能単位の小さいサイクルで繰り返す開発手法。起動修正が容易で、素早く開発できる、計画がたてにくい
⚪︎マイグレーション
　　移行、移動すること。ソフトウェアやハードウェア、システム、データ、開発言語などを別のプラットフォームに移行したり、新しいシステムに切り替えたりすること
⚪︎デグレーション
　　プログラムにおいて、直したはずのバグが復活していたり、前はなかったはずのバグがあったり、実装したはずの機能がなくなっている状態のこと
⚪︎デプロイ
　　配備する、展開する。開発したシステムやサービスをサーバー上に配備して使える状態にすること
⚪︎コンフリクト
　　衝突。複数のプログラムが同じデータやファイルを同時に使用しようとして競合状態になってしまうこと
⚪︎環境
　⚪︎開発環境（ローカル）
　　開発するための必要な機能が揃った作業場所。ローカル＝自分のコンピュータ、自分側。⇄リモート
　⚪︎検証環境（ステージング）
　　正しく動作するか検証する試験（テスト）のために用意された動作環境。ステージング環境とは、開発の最終段階で検証用に用意される実際の運用環境と変わらない環境のこと。
　⚪︎本番環境
　　できあがったシステムやサービスが実際に動く環境（コンピュータとか中に入っているソフトとか）のこと
⚪︎設計書／仕様書
　⚪︎要件定義
　　顧客のどんなシステム、どんな機能が欲しいのか、どんなことがしたいのかを相談してまとめる工程のこと。
　⚪︎基本設計書
　　基本設計とは要件定義をもとにしてシステムの概要を考える工程。その基本設計の内容をまとめた資料のこと。
　⚪︎詳細設計書
　　基本設計の内容をもとにして実際にプログラムが作れるようにシステムの詳細を決めていく工程。その詳細設計の内容をまとめた資料のこと。
⚪︎テスト
　⚪︎単体テスト（UT）
　　Unit Test。一つ一つの機能ごとのテスト
　⚪︎結合テスト（CT／IT）
　　Integration Test, Combined Test。それぞれの機能同士が合体、連携してもきちんと動作するか確認するテスト。
　⚪︎総合テスト（ST）
　　System Test。開発の最終段階にシステム全体を対象に行われるテスト
⚪︎エビデンス／証跡
　　テストした証拠となるデータやハードコピー、ログなど。
⚪︎データパッチ
　　ソフトに変更を加える後付けのプログラム
⚪︎Access
　　ちょっかいを出しに行くこと。〇〇を使わせろ、〇〇を見せろという目的
⚪︎マクロ
　　事前に操作方法を記録して、記録した内容を実行させる機能。業務の自動化することなどができる。
　⚪︎VBA
　　利用者が簡易なプログラムを記述して実行することで複雑な処理の自動化などを行なうことができるもの。また、そのために用意されたプログラミング言語。
⚪︎GAS（Google Apps Script）
　　Googleが開発・提供しているプログラミング言語でJavaScriptをベースに作成されている。Googleのサービスや外部のアプリケーションと連携。業務の自動化など行える。
⚪︎API
　　Application Programing Interface。ソフトウェアの一部を公開して他のソフトウェアと機能を共有できるようにしたもの
　⚪︎WEB API
　　API提供者とAPI利用者とのやりとりをHTTP／HTTPSベースで実現するAPI。
　⚪︎REST API
  　Webシステムを外部から利用するためのプログラムの呼び出し規約（API）の種類の一つで、「REST」（レスト）と呼ばれる設計原則に従って策定されたもの。
　⚪︎SOAP
　　Simple Object Access Protocol。遠隔地にあるコンピュータのプログラムやデータにアクセスするためのプロトコルのことである。インターネット上に公開された認証機能や課金機能といった個々の機能を呼び出すために用いられる。
⚪︎Ajax
  Asynchronous(非同期) JavaScript ＋ XML（形式）。JavaScriptを使って非同期通信をすること
　⚪︎XML
  　マークアップ言語の一つであり、HTMLのような言語。ファイルの書き方のルールの一つ
　⚪︎JSON
　　JavaScript Object Notation。JavaScriptをベースとしたデータ記述言語のこと。特にウェブアプリケーションでのサーバー、クライアント間のデータの受け渡しにJson形式を使用するケースが増えてきている。
　　記述できるデータタイプは「数値」「文字列」「真偽値」「配列」「ハッシュ」「null」の6つ。
　⚪︎ステータスコード
　　HTTPリクエストの結果を表す3桁の数字。
　⚪︎クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
　　origin == protocol + domain + port number。あるオリジンで動いている Web アプリケーションに対して、別のオリジンのサーバーへのアクセスをオリジン間 HTTP リクエストによって許可できる仕組みのこと
⚪︎バリデーション
　　入力チェック、書式(データの形式)チェックのことで、妥当性をチェックする機能のこと
　
⚪︎データ連携
　⚪︎Daemon
  メモリ上での、UNIX系のOS（LinuxとかMacとか）における常駐プログラムの呼び名。最後に「d」を付けるのが慣例。httpdやftpdなど
　⚪︎CRON
  指示した時間に指定したプログラムを動かしてくれるUNIX系のOSに入っているプログラムの一つ。
　⚪︎バッチ
  バッチ（Batch）は「ひと束」「一群」「1回分にまとめる」という意味で、バッチ処理はあらかじめ登録した一連の処理を自動的に実行する処理方式を指す。 複数のプログラムやファイル転送コマンドなどの実行順序を定義し、大量のデータを一括処理する。 処理の単位を「バッチ」と呼ぶ。
　⚪︎ログ
　やったことや、起こったことの記録。いつ、誰が、何をやったか、補足を記録することが多い
　⚪︎CSV
　Comma Separated Values。書式（CSV形式）、データ（CSVデータ）、ファイル（CSVファイル）のどれか。項目間がカンマで区切られている形式
　⚪︎TSV
　Tab Separated Values。書式（TSV形式）、データ（TSVデータ）、ファイル（TSVファイル）のどれか。項目間がタブで区切られている書式。
　⚪︎プルリクエスト（マージリクエスト）
　コードの変更をレビュワーに通知し、マージを依頼する機能です。コードのレビューを受けることで、1人で作ると気がつかないコードの指摘やバグや記述ミスの発見ができ、コードの品質を高める

■ チケット管理ツール
⚪︎asana
　タスク管理ツールの一つ。
⚪︎Backlog
  株式会社ヌーラボが提供するプロジェクト管理ツール
⚪︎Jooto
  クラウド型のプロジェクト・タスク管理ツール。日本語と英語両方に対応
⚪︎Readmine
  ReadmineはWebベースのプロジェクト管理ソフトウェア。Ruby on Railsで開発されている
⚪︎Trello
　基本無料のチケットタスク管理ツール

■ バージョン管理
ファイルの変更履歴を管理してくれるシステムのこと
⚪︎集中型
　クライアントサーバー型のバージョン管理システム。一つのリポジトリを使う。開発に参加するメンバーは、共有するリポジトリからソースコードを持ってきて編集し、編集が終わったら中央リポジトリに反映する。SVNなど
⚪︎分散型
　リポジトリを複数持つことができ、開発の形態や規模に合わせてソースコードの管理ができる。リモートリポジトリをサーバー上に置き、開発者がそれぞれにローカルでリポジトリを持てる構成。Gitなど
⚪︎Github
  ファイルの変更履歴を管理してくれる分散型バージョン管理システムのひとつ。
⚪︎Backlog
　タスク管理ツールの一つだがSVNとGitのリポジトリとして利用可能で、バージョン管理システムとして使うこともできる
⚪︎SourceTree
　Gitを簡単に使えるようにしたツールで、GUIでGitを使えるようにしたもの
⚪︎Tortoise SVN（トータスエスブイエヌ）
　Subversionというクライアント/サーバ型の集中型バージョン管理システムのサーバーに対するクライアント。GUI形式になっている

⚪︎Git Flow
 それぞれ役割が振られているmaster, release, develop, feature, hot-fixの5つのブランチを活用するGitの開発手法
　⚪︎master
　　リリースしたデータを置いておくブランチ
　⚪︎release
　　リリース前に準備、微調整をおこなうブランチ
　⚪︎develop
　　開発をおこなうためのブランチ
　　⚪︎feature
　　　開発をおこなうためのブランチで、個々の機能の実装やバグの解決をおこなう
■ FW／ライブラリ
⚪︎FW
　フレームワーク。開発を行う際に必要となる機能や、基本的な骨組みをまとめたもの、雛形のこと
　⚪︎Spring Framework
　Java言語のWebアプリケーションフレームワーク。特徴はやりたいことが提供されていること、保守性が高いこと。拡張や改善に優れ、また複雑なことをするにも必要な機能を提供してくれる
　⚪︎Struts
　Javaの昔普及したフレームワーク。オーソドックスなフレームワークで、MVCモデル（Model View Controller）が採用。
　⚪︎JSF（Java Server Faces）
  JavaベースのWebアプリケーションフレームワーク。Java標準のフレームワークであるJava EEの仕様の一つに採用されている。大規模なシステムに必要な機能が提供されている。

⚪︎ライブラリ
　便利なプログラムのコードが集められたファイルのこと。求められた機能を実現するために、コードを再利用して開発効率を上げたり、プログラムを軽くしたりするために使われる
　⚪︎Bootstrap
　　HTML／CSS／JavaScriptから構成されるWEBフレームワーク
　⚪︎Flyway
　　DBマイグレーションツール。データベースのスキーマに対してバージョン管理するツール。
　⚪︎Jackson
   JacksonはJavaで使えるJSONライブラリです。JSON形式の文字列をJavaのオブジェクトに直接マッピングしたり、逆にJavaオブジェクトをJSON文字列に変換できたりする
　⚪︎jQuery
　　ウェブブラウザ用のJavaScriptコードをより容易に記述できるようにするために設計されたJavaScriptライブラリ
　⚪︎Junit
   Javaで開発されたプログラムにおいて単体テストの自動化を行うためのフレームワーク
　⚪︎Log4j
　　オープンソースのJavaプログラム用ロギングユーティリティ（API）。
　　ロギングユーティリティとは、プログラム内部から、デバッグ情報やエラー情報などのログデータを、コンソール、ファイル、その他ログサーバなどヘ出力する機能
　⚪︎Lombok
　　Java特有の冗長なコードを簡潔にしてくれるオープンソースのライブラリ
　⚪︎ORM
   Object-relational mapping/オブジェクト関係マッピング。オブジェクト指向と関係データベースの考え方を上手く変換して繋いでくれるもの

■ 連絡ツール
⚪︎ChatWork
  Chatwork株式会社が提供するクラウド型ビジネスチャットツール
⚪︎Slack
  スチュワート・バターフィールドによって開発されたチームコミュニケーションツール
⚪︎IP Messenger
  同一 LAN 環境内に閉じたメッセンジャーのフリーソフトです。外部サーバーへ接続せず、同じネットワーク環境上の端末間でメッセージやファイルのやりとりができる

■ Java
⚪︎Javadoc
  JavaのソースコードからHTML形式のAPI仕様書を生成するもの。コードを説明するコメントから。
⚪︎アノテーション
  アノテーションとは日本語で「注釈」という意味です。Javaではコンピューターに対してソースコードだけでは命令しきれない情報を伝えるために使用します。アノテーションを使うことで、わざとエラーを出力させたり、プログラムの動作を変更させたりと、色々なことが行える
⚪︎メモリ管理
　⚪︎ヒープ
　　ユーザが作ったプログラムが利用するメモリ領域。ヒープ領域は大きく「New」と「Old」に分けられます
　⚪︎GC
　　具体的にはヒープに格納されているオブジェクトのうち、不要となったものを削除する＝ガベージコレクション（GC）
⚪︎GoF
  有名なデザインパターン。GoF（Gnag of Four）。「生成」や「構造」、「振る舞い」の3つに分類された、23のパターンがある
⚪︎デザインパターン
  オブジェクト指向の言語で使われる設計パターンのこと。過去のエンジニアが解決してきた方法（設計）が、デザインパターンとしてまとめられている

■ その他
⚪︎オブジェクト指向
　一つ一つの事象をオブジェクト（モノ）と考えて設計しようとする考え方。一つ一つを細かい部品のように考える
⚪︎バッチ処理
　どこかのタイミングでまとめてやる処理のこと。
⚪︎コンパイル
　ソースコードをバイナリコードに変換する作業
⚪︎カバレッジ
　網羅率。どれくらいカバーしているか（したか）。
⚪︎プラットホーム
　動かすために必要な、土台となる環境。
